
/**
 * Payment Status Handler
 * 
 * This module handles checking status of payments
 */

import { supabase } from "@/integrations/supabase/client";

/**
 * Get payment status
 * @param paymentId The ID of the payment to check
 * @param userId The ID of the user requesting status
 * @returns A result object with payment details
 */
export const getPaymentStatus = async (
  paymentId: string | number,
  userId: number
): Promise<{ success: boolean; message: string; payment?: any }> => {
  try {
    console.log(`Checking payment status for payment ${paymentId}, user ${userId}`);
    
    // Convert paymentId to number if it's a string
    const paymentIdNum = typeof paymentId === 'string' ? parseInt(paymentId, 10) : paymentId;
    
    if (isNaN(paymentIdNum)) {
      console.error('Invalid payment ID');
      return { 
        success: false, 
        message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.' 
      };
    }

    // Get payment details
    const { data: payment, error: paymentError } = await supabase
      .from('payments')
      .select('*, fundraisers(*)')
      .eq('id', paymentIdNum)
      .single();

    if (paymentError || !payment) {
      console.error('Payment not found:', paymentError);
      return {
        success: false,
        message: '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
      };
    }

    // Check if user has permission to view this payment
    const isOrganizer = payment.fundraisers.creator_id === userId;
    const isPaymentOwner = payment.user_id === userId;

    if (!isOrganizer && !isPaymentOwner) {
      return {
        success: false,
        message: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º –ø–ª–∞—Ç–µ–∂–µ.'
      };
    }

    // Format status
    const status = 
      payment.status === 'pending' ? '–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' :
      payment.status === 'confirmed' ? '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' :
      payment.status === 'rejected' ? '–æ—Ç–∫–ª–æ–Ω–µ–Ω' : payment.status;

    const message = 
      `üßæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ #${payment.id}:\n\n` +
      `–°–±–æ—Ä: ${payment.fundraisers.title}\n` +
      `–°—É–º–º–∞: ${payment.amount} —Ä—É–±.\n` +
      `–°—Ç–∞—Ç—É—Å: ${status}\n` +
      (payment.comment ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${payment.comment}\n` : '') +
      (payment.status === 'rejected' && payment.rejection_reason ? `–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: ${payment.rejection_reason}\n` : '') +
      `–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${new Date(payment.created_at).toLocaleString('ru-RU')}\n` +
      (payment.confirmed_at ? `–î–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${new Date(payment.confirmed_at).toLocaleString('ru-RU')}\n` : '') +
      (payment.rejected_at ? `–î–∞—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è: ${new Date(payment.rejected_at).toLocaleString('ru-RU')}\n` : '');

    return {
      success: true,
      message: message,
      payment: payment
    };
  } catch (error) {
    console.error('Error in getPaymentStatus:', error);
    return {
      success: false,
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    };
  }
};
